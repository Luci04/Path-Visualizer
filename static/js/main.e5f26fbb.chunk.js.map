{"version":3,"sources":["Node/Node.js","algorithms/dijkstra.js","algorithms/bfs.js","Pathfinding.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","Infinity","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","que","PathfindingVisualizer","state","allTime","mouseIsPressed","woring","Reset","bind","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","i","setTimeout","animateShortestPath","document","getElementById","visited","reverse","style","backgroundColor","colorShortestPath","isWeight","animateDijkstra","flag","bfs","animateAlgo","colorAlgo","onClick","visualizeDijkstra","visualizeBfs","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e5f26fbb.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n    render() {\n        const {\n            col,\n            isFinish,\n            isStart,\n            isWall,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp,\n            row,\n        } = this.props;\n        const extraClassName = isFinish\n            ? 'node-finish'\n            : isStart\n                ? 'node-start'\n                : isWall\n                    ? 'node-wall'\n                    : '';\n\n        return (\n            <div\n                id={`node-${row}-${col}`}\n                className={`node ${extraClassName}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}></div>\n        );\n    }\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        // If we encounter a wall, we skip it.\n        if (closestNode.isWall) continue;\n        // If the closest node is at a distance of infinity,\n        // we must be trapped and should therefore stop.\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (let row of grid) {\n        for (let node of row) {\n            if (node.isWall === true)\n                node.distance = Infinity\n            nodes.push(node);\n        }\n    }\n\n    return nodes;\n}\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}","\nexport function bfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const que = [];\n  que.push(startNode);\n  while (que.length > 0) {\n\n    const closestNode = que.shift();\n    closestNode.isVisited = true;\n\n    if (closestNode.isWall) { continue; }\n    visitedNodesInOrder.push(closestNode);\n\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid, que);\n\n  }\n  return visitedNodesInOrder;\n}\n\nfunction updateUnvisitedNeighbors(node, grid, que) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (let neighbor of unvisitedNeighbors) {\n    neighbor.previousNode = node;\n    neighbor.isVisited = true;\n    que.push(neighbor);\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n","import React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../src/algorithms/dijkstra';\nimport { bfs } from './algorithms/bfs';\nimport './Pathfinding.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [],\n            allTime: [],\n            mouseIsPressed: false,\n            woring: false\n        };\n        this.Reset = this.Reset.bind(this);\n    }\n\n    componentDidMount() {\n        const grid = getInitialGrid();\n        this.setState({ grid });\n    }\n\n    handleMouseDown(row, col) {\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n\n    handleMouseEnter(row, col) {\n        if (!this.state.mouseIsPressed) return;\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({ grid: newGrid });\n    }\n\n    handleMouseUp() {\n        this.setState({ mouseIsPressed: false });\n    }\n\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                setTimeout(() => {\n                    this.animateShortestPath(nodesInShortestPathOrder);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-visited';\n            }, 10 * i);\n        }\n    }\n\n    Reset() {\n        const visitedNodesInOrder = this.state.visited.reverse();\n\n        document.getElementById(`node-10-35`).style.backgroundColor = \"red\";\n\n        let i;\n\n        for (i = 0; i < visitedNodesInOrder.length; i++) {\n\n            const node = visitedNodesInOrder[i];\n            setTimeout(() => {\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node';\n            }, 5 * i);\n        }\n\n        setTimeout(() => {\n            document.getElementById(`node-10-15`).style.backgroundColor = \"green\";\n        }, i * 5);\n\n    }\n\n    colorAlgo(visitedNodesInOrder, nodesInShortestPathOrder) {\n\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                this.colorShortestPath(nodesInShortestPathOrder);\n                return;\n            }\n            const node = visitedNodesInOrder[i];\n\n            if (node.isStart) {\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-visited-start-simple';\n            }\n            else if (node.isFinish) {\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-visited-finish-simple';\n            }\n            else if (node.isWeight) {\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-visited-weight-simple';\n            }\n            else {\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-visited-simple';\n            }\n        }\n    }\n\n    colorShortestPath(nodesInShortestPathOrder) {\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n\n            const node = nodesInShortestPathOrder[i];\n            if (node.isStart) {\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-shortest-path-start-simple';\n            }\n            else if (node.isFinish) {\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-shortest-path-finish-simple';\n            }\n            else {\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-shortest-path-simple';\n            }\n        }\n    }\n\n    animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder) {\n\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                setTimeout(() => {\n                    this.animateShortestPath(nodesInShortestPathOrder);\n                }, 5 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n\n                if (node.isStart) {\n                    document.getElementById(`node-${node.row}-${node.col}`).className =\n                        'node node-visited-start';\n                }\n                else if (node.isFinish) {\n                    document.getElementById(`node-${node.row}-${node.col}`).className =\n                        'node node-visited-finish';\n                }\n                else if (node.isWeight) {\n                    document.getElementById(`node-${node.row}-${node.col}`).className =\n                        'node node-visited-weight';\n                }\n                else {\n                    document.getElementById(`node-${node.row}-${node.col}`).className =\n                        'node node-visited';\n                }\n            }, 5 * i);\n        }\n    }\n\n    animateShortestPath(nodesInShortestPathOrder) {\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n            setTimeout(() => {\n                const node = nodesInShortestPathOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-shortest-path';\n            }, 50 * i);\n        }\n    }\n\n    visualizeDijkstra() {\n        const { grid } = this.state;\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        this.setState({ visited: visitedNodesInOrder });\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    visualizeBfs() {\n        const grid = this.state.grid;\n        var flag = 0;\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n        const visitedNodesInOrder = bfs(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        if (flag === 0) {\n            this.animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder);\n            flag = 1;\n        }\n        else {\n            this.colorAlgo(visitedNodesInOrder, nodesInShortestPathOrder);\n        }\n    }\n\n    render() {\n        const { grid, mouseIsPressed } = this.state;\n\n        return (\n            <div>\n                <div>\n                    <button className=\"btn draw-border\" onClick={() => this.visualizeDijkstra()}>\n                        Visualize Dijkstra's Algorithm\n        </button>\n                    <button className=\"btn draw-border\" onClick={() => this.visualizeBfs()}>\n                        Visualize BFS Algorithms\n        </button>\n                    <button className=\"btn draw-border\" onClick={() => this.Reset()}>Click to reload!</button>\n                </div>\n                <div className=\"grid\">\n                    {grid.map((row, rowIdx) => {\n                        return (\n                            <div key={rowIdx}>\n                                {row.map((node, nodeIdx) => {\n                                    const { row, col, isFinish, isStart, isWall } = node;\n                                    return (\n                                        <Node\n                                            key={nodeIdx}\n                                            col={col}\n                                            isFinish={isFinish}\n                                            isStart={isStart}\n                                            isWall={isWall}\n                                            mouseIsPressed={mouseIsPressed}\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                            onMouseEnter={(row, col) =>\n                                                this.handleMouseEnter(row, col)\n                                            }\n                                            onMouseUp={() => this.handleMouseUp()}\n                                            row={row}></Node>\n                                    );\n                                })}\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n\n        );\n    }\n}\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n        const currentRow = [];\n        for (let col = 0; col < 50; col++) {\n            currentRow.push(createNode(col, row));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst createNode = (col, row) => {\n    return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null,\n    };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};","import React, { Component } from 'react'\nimport './App.css';\nimport Pathfinding from './Pathfinding';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Pathfinding />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}